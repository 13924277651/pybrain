.. developer-guide:


Developer guide
===============


This guide will lead you through the process of contributing to PyBrain. 


Getting into the development cycle
----------------------------------


PyBrain uses `git <http://git-scm.com/>`_ as its source control managment 
system. The project is hosted at `github <http://github.com/pybrain/pybrain>`_,
a social development portal. 


Using git
^^^^^^^^^

If you do not know git, there is some stuff to read before you can get started. 
We recommend that you start at `the github learning pages 
<http://learn.github.com/>`_. It will point you to further resources where you 
can get help. There is a lot of different resources on the web - you can find 
most of them `here <http://help.github.com/>`_.

If you have made yourself familiar with git, you should check out github. Be 
sure to register and follow their tutorials on how to connect with github. 

As soon as you have done that, you can fork our project `pybrain/pybrain 
<http://github.com/pybrain/pybrain>`_. You can then get a local clone and do
your changes. 

If you have pushed your changes to your fork, you can send pull requests to us
via the github web interface. We will then try to incorporate your changes.

In some cases, you may already have a clone of the pybrain repository without a
github account. In that case, fork the pybrain project as above on the github 
wegpage. Now go into your old clone and use::

    $ git remote add <your-username> <your-private-clone-url>

This adds your fork as a "remote", from where you can pull from and push to 
changes. Then use::

    $ git merge <your-username>

to merge in any changes since you first cloned the project. Afterwards, your 
local changes can be pushed to github::

    $ git push --all <your-username> 


Bypassing git
^^^^^^^^^^^^^

Getting involved with a new version control system always includes some time of
learning. In some cases, people do not have the time or will to learn right away
and first want to get their code running. In that case, you can always download
the latest version `here <http://github.com/pybrain/pybrain>`_. Do your changes
in your local folder and send new versions (or even better, patches) to 
`coredev@python.org <mailto:coredev@python.org>`_.


Contribution guidelines
-----------------------

In the following, we line out how code, tests and documentation for PyBrain 
should be written. 


Writing code
^^^^^^^^^^^^

The PyBrain project follows the `Python style guide 
<http://www.python.org/dev/peps/pep-0008>`_. Other than most Python projects, 
we follow the "camelCase" way of naming classes and methods. Furthermore, every
module should have a ``__author__`` variable at the top. It should include the
authors' names and email adresses.


Writing tests
^^^^^^^^^^^^^

One of PyBrain's goals is a wide range of tests. PyBrain leaves you the choice 
to either use the `unittest` or the `doctest` module. When you write tests, it
is best to have a look at already existing tests which reside in 
``pybrain/tests/unittests``. Before you submit any changes, be sure that all 
tests pass and get in touch with the respective author if not so. You can do 
by running::

    $ python pybrain/tests/runtests.py

which automatically grabs all tests named ``test_*`` from the 
``pybrain/tests/unittest`` directory.  


Writing documentation
^^^^^^^^^^^^^^^^^^^^^

The PyBrain project uses `Sphinx <http://sphinx.pocoo.org>`_ for documentation.
The corresponding files lie in ``docs/sphinx/``. 




